name: Deploy OTC API to GCP

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.4.2)'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Install GKE auth plugin
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Configure kubectl
        env:
          CLUSTER_NAME: ${{ vars.GCP_CLUSTER_NAME }}
          CLUSTER_REGION: ${{ vars.GCP_REGION }}
          PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
        run: |
          gcloud container clusters get-credentials "${CLUSTER_NAME}" --region "${CLUSTER_REGION}" --project "${PROJECT_ID}"

      - name: Update version in values file
        run: |
          sed -i "s/tag: \".*\"/tag: \"${{ github.event.inputs.version }}\"/" otc-api/helm/values-gcp.yaml

      - name: Extract environment variables
        id: extract-env
        run: |
          DB_HOST=$(yq '.env.DB_HOST' otc-api/helm/values-gcp.yaml)
          DB_PORT=$(yq '.env.DB_PORT' otc-api/helm/values-gcp.yaml)
          DB_USER=$(yq '.env.DB_USER' otc-api/helm/values-gcp.yaml)
          DB_NAME=$(yq '.env.DB_NAME' otc-api/helm/values-gcp.yaml)
          REDIS_HOST=$(yq '.env.REDIS_HOST' otc-api/helm/values-gcp.yaml)
          REDIS_PORT=$(yq '.env.REDIS_PORT' otc-api/helm/values-gcp.yaml)
          REDIS_PASSWORD=$(yq '.env.REDIS_PASSWORD' otc-api/helm/values-gcp.yaml)
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          echo "DB_PORT=$DB_PORT" >> $GITHUB_ENV
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
          echo "REDIS_HOST=$REDIS_HOST" >> $GITHUB_ENV
          echo "REDIS_PORT=$REDIS_PORT" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=$REDIS_PASSWORD" >> $GITHUB_ENV

      - name: Deploy to GCP
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          helm upgrade --install otc-api ./otc-api/helm/otc-api \
            -f ./otc-api/helm/values-gcp.yaml \
            --set env.DB_PASSWORD=$DB_PASSWORD \
            --set env.JWT_SECRET=$JWT_SECRET \
            --set env.API_KEY=$API_KEY 